server.port=8899
spring.application.name=gateway
eureka.client.serviceUrl.defaultZone=http://admin:123456@127.0.0.1:8761/eureka/
eureka.instance.hostname=${spring.cloud.client.ipAddress}
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}
eureka.instance.preferIpAddress=true

# 如果路由是指定url的方式，则zuul.host开头的生效
zuul.host.connect-timeout-millis=30000
zuul.host.socket-timeout-millis=300000

# 配置serviceId，进行路由转发
zuul.routes.client.path=/client/**
zuul.routes.client.service-id=eureka-client

# zuul内部路由可以理解为使用一个线程池去发送路由请求，
# 所以我们需要扩大这个线程池的容量
zuul.host.max-total-connections=1000
zuul.host.max-per-route-connections=1000

# zuul使用Hystrix，而Hystrix有隔离策略：THREAD、SEMAPHORE
# 默认是SEMAPHORE,默认大小是100。请求的并发线程超过100就会报错。
zuul.semaphore.max-semaphores=5000

# ['rɪbən]
# 如果路由是serviceId的方式，则ribbon开头的生效
ribbon.ReadTimeout=300000
ribbon.ConnectTimeout=60000

# Ribbon重试机制配置：
# 该参数原来开启重试机制，默认是关闭状态false
spring.cloud.loadbalancer.retry.enabled=true

# 切换实例的重试次数
ribbon.MaxAutoRetriesNextServer=1

# 对所有操作都进行重试
ribbon.OkToRetryOnAllOperations=true

# 对当前实例的重试次数
ribbon.MaxAutoRetries=1

# hystrix [hɪst'rɪks]
# 断路器的超时时间，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试机制
hystrix.command.default.excution.isolation.thread.timeoutInMilliseconds=30000
hystrix.command.eureka-client.excution.isolation.thread.timeoutInMilliseconds=30000

# 设置熔断器失败的个数，默认为20个
hystrix.command.default.circuitBreaker.requestVolumeThreshold=200

# 设置fegin的核心线程池的数量,默认为10
hystrix.threadpool.default.coreSize=100

# 断路器超时设置和请求的超时
hystrix.command.default.execution.timeout.enable=true
hystrix.timeoutInMillions=300000

# 设置回退的最大线程数
hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests=50

# 连接EurekaServer的超时时间，单位：秒
eureka.client.eureka-server-connect-timeout-seconds=10

# 读取EurekaServer信息的超时时间，单位：秒
eureka.client.eureka-server-read-timeout-seconds=30

# eureka开启健康检查（需要spring-boot-starter-actuator依赖）
# 是微服务与Eureka注册中心交互正常的情况下，微服务因自己内部原因无法正常对外提供服务，
# 主动告诉注册中心自己出了问题，让注册中心别发新的请求过来。
eureka.client.healthcheck.enable=true

# eureka-client间隔多久去拉取服务注册信息，默认30秒
eureka.client.registry-fetch-interval-seconds=5

# eureka的自我保护是对微服务实例的地址信息进行保护，避免因一些意外情况将正常节点直接剔除。
# eureka-client发送心跳给server端的频率，默认30秒
eureka.instance.lease-renewal-interval-in-seconds=5

# 等待下一次心跳，如果在这个时间内没有收到心跳，则移除该instance，默认90秒
eureka.instance.lease-expiration-duration-in-seconds=10

